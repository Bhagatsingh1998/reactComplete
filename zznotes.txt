7.7. Component Creation Lifecycle in Action
App.js
Persons.js
Person.js

as we can see, all those class lifecycle methods executed in an order.


7.6. Class Component Lifecycle Overview

class based lifecycle: we have different methods which can add to differnt class based components and react will execute them for us at different points of time and we can do different things for them.
  eg: fetch data from web,
      or some cleanup work before a compoennt is removed from the DOM
NOTE: lifecycle components === lifecycle hooks (nothing to do with react hooks)

lets see how do they execute and in what order.

component lifecycle during creation:
  as there is diff between lifecycle hook that runs whenever something change (eg: props) and when compenent is rendered for the first time.

  execution in order:-
    1. constructor :
      1. it is not a lifecycle hook, a  defualt es6 feature ie when class is created, constructure is called
      2. it will recieve props of teh componenet
      3. we have to call 'super(props)', only if we add own constructor.
      4. id we dont create own constructor, no need to call super(props) explicitly.
      5. this constructor, can be used for basic inilization phase
      6. what we should not do (side effects) means : not making http req, storing something, etc...
        all this we should not do as it will hinder our app proformance and can cause rerefer cycle
    
    2. getDerivedStateFromProps(props, state) :
      1. it was added with 16.3
      2. its idea is to whenver our props change for your class based componenet, you can sink your state to them
        and it will happen every very rarely. thus, this hook is not much used.
      3. thus, we want to update the component before it is rendered, we should use this.
      4. cant do side effect: not sending http req
      5. its a static method, hence add 'static' keyword before the method name.

    3. render()
      1. it returs JSX ie renders HTML code
      2. cant do side effects: not sending http req or any timeouts or anything which can blo;ck this rendering process.

    4. Render Child Components
      1. once render start, any compenents which are added in render method will start rendering
      2. once all the subcomponets life cycle finishes, our render method will be completed and futher execution takes palce.
    
    5. componentDidMount()
      1. it will start once render method of componenet is finished.
      2. its a imp hook and will be used more often.
      3. can cause side effects ie can make http request
      4. cant do: dont update the state unless it is in 'then()' block of teh promise. cant call setState synchronously as that can use rerender cycle and that is bad for performance.
     







7.5. Class-based vs Functional Components
index.js
App.js
Cockpit.js


7.4. Comparing Stateless and Stateful Components
---

7.3. Splitting an App Into Components
App.js
Persons.js
Cockpit.js
Cockpit.css


7.2. A Better Project Structure
ErrorBoundary : deleted
Components/Cockpit/Cockpit.js : new file
Components/Persons/Persons.js :new file
Components/Persons/Person/Person.js : deleted random error
Components/Persons/Person/Person.css : no changes
Containers/App.js : ErrorBoundary deleted, changing path
Containers/App.css : no change
Containers/App.test.js :  no change
index.js : changing path
assets : new folder, in case we nned to add any img




6.5. Using Error Boundaries (React 16+)
Person.js
ErrorBoundary/ErrorBoundary.js
App.js

5.11. Working with Media Queries
Person.js
Person.css


5.10. Adding Pseudo Selectors
App.js
App.css

5.9
---

5.8. Enabling & Using CSS Modules
webpack.config.js
App.js
Person.js

5.7
---

5.6. Using Radium for Media Queries
Person.js
App.js

5.5. Adding and Using Radium
App.js
Person.js

5.4. Setting Class Names Dynamically
App.js
App.css


5.3. Setting Styles Dynamically
App.js


5.2. Outlining the Problem Set
---


4.9
App.js

4.8 : adding key property
App.js

4.7 : deleting a list
App.js

4.6
Person.js
App.js

4.5 : converting 'person' to 'persons' in state. hence changing at respective places where this.state.person is used
App.js

4.4
intro

4.3
App.js

4.2
App.js

3.25
App.js

3.24 :creating and linking css file
Person.css
Person.js

3.23 : 
now we want to user to enter the name and that should be visible instead of 'Bob'
Person.js
App.js

3.22 : passing params
App.js
Person/Person.js

3.21
App.js


3.20
App.js


3.18
App.js

3.16
App.js  :button

3.14
App.js : state

3.13
App.js
Person/Person.js


3.12
App.js
Person/Person.js

3.11
Person/Person.js

3.10
App.js



3.8
Person/Person.js
App.js

it is convension that all the compenents name start with uppercase. as we are planning to create one component regarding person, hence created 'Person' compenent.


3.6
App.js

3.5
index.js
App.js

react is all about creating compenents. 
"App" compenent gets used in "index.js" file and from it is reendered to "root" compenent of index.html file


