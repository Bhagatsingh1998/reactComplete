7.3. Splitting an App Into Components
App.js
Persons.js
Cockpit.js
Cockpit.css

thus, like this we should create as much components pssible and making our code clean.


7.2. A Better Project Structure

// till now, we just have 2 components 
  // 'Person.js' : output one sinle person at a time .
    // its is quite specific and no need to change that. but if we cant gloval styling that we put styles in'index.css'. or if we want one 'inout box' at mmany places, we can remove it from here and make seprate componenet.
  // 'App.js' : manages out state, but this file can be spilled as it is doing lot of work.
    // 'Contanier Componenets' ie components which manages state should not invovele with UI. thus, their render method shiuld be lean and not contain much of JSX.
    // thus, we can create one 'Persons' componenet which contain list of persons. and at last, imponting 'Persons' component in our app.
    // another one is outputing cockpit into its own coponent. which contains the top most part of app and toggle button.
    // thus. 'App.js' render will have just render Cockpit and Persons componenet. hence, making our app more focused. 
  
// once, done creating all the componenets, changing the import path and our app should shart working correctly.

ErrorBoundary : deleted
Components/Cockpit/Cockpit.js : new file
Components/Persons/Persons.js :new file
Components/Persons/Person/Person.js : deleted random error
Components/Persons/Person/Person.css : no changes
Containers/App.js : ErrorBoundary deleted, changing path
Containers/App.css : no change
Containers/App.test.js :  no change
index.js : changing path
assets : new folder, in case we nned to add any img




6.5. Using Error Boundaries (React 16+)
Person.js
ErrorBoundary/ErrorBoundary.js
App.js

5.11. Working with Media Queries
Person.js
Person.css


5.10. Adding Pseudo Selectors
App.js
App.css

5.9
---

5.8. Enabling & Using CSS Modules
webpack.config.js
App.js
Person.js

5.7
---

5.6. Using Radium for Media Queries
Person.js
App.js

5.5. Adding and Using Radium
App.js
Person.js

npm install --save radium
as we cant use sudo selectors in one line style and media queries. Radium helps us to solve this Problem
  sudo selectors :  selectors which depands on other selectors 
    eg: button:hover 

5.4. Setting Class Names Dynamically
App.js
App.css


5.3. Setting Styles Dynamically
App.js


5.2. Outlining the Problem Set
---


4.9
App.js

4.8 : adding key property
App.js

4.7 : deleting a list
App.js

4.6
Person.js
App.js

4.5 : converting 'person' to 'persons' in state. hence changing at respective places where this.state.person is used
App.js

4.4
intro

4.3
App.js

4.2
App.js

3.25
App.js

3.24 :creating and linking css file
Person.css
Person.js

3.23 : 
now we want to user to enter the name and that should be visible instead of 'Bob'
Person.js
App.js

3.22 : passing params
App.js
Person/Person.js

3.21
App.js


3.20
App.js


3.18
App.js

3.16
App.js  :button

3.14
App.js : state

3.13
App.js
Person/Person.js


3.12
App.js
Person/Person.js

3.11
Person/Person.js

3.10
App.js



3.8
Person/Person.js
App.js

it is convension that all the compenents name start with uppercase. as we are planning to create one component regarding person, hence created 'Person' compenent.


3.6
App.js

3.5
index.js
App.js

react is all about creating compenents. 
"App" compenent gets used in "index.js" file and from it is reendered to "root" compenent of index.html file


