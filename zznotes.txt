5.8. Enabling & Using CSS Modules
webpack.config.js
App.js
Person.js

with radium its one way of scoping your style 
another way:
  Person.css should be only scoped with Person.js. thus, not over writing the styles in other componenets even if we have common names for css classes between components.
  this feature is known as css modules

Applying css module to current web app, for that removing all the radium implemenatations
  :hover
  styleRoot
  media query
  radium import and supercomponenet

to apply css module, we have to make changes in our project.
we, know we are using 'react-scripts' which exposes the whole build workflow and we cant really add the configrations. one thing whcj can be done is search for 'react-scripts' in node_modules, nut we should not do that as whenever we re-run our npm, our changes will get lost and will be re-written by default configrations.
but,
'eject' : its a command which gives us access to configrations.
  npm run eject 
  it will helps us to edit the configrations of whole managed project 
  once this command run successfully,
  we will get two folders:
    scripts :-  its contains 3 files. one file each command. 
      "start": "node scripts/start.js",
      "build": "node scripts/build.js",
      "test": "node scripts/test.js"
    config :- its contains configration files. 
      here we are interested in webpack.config.js file. 
        webpack : it basically builds, its the bundling tool which applies all kinds of transforamation and optimizations on our files and bundles and bundles them together.
          as of this process, it manages our css files. it parses all the the css imports in JS files. thus, it mamages our css files, we can add the configrations to it and unlock css module feature 
  thus, to unlock the feature of 'css modules', we will do this

webpack.config.js:
  modules:
    // changes from line 427 to 435
    {
      test: cssRegex,
      exclude: cssModuleRegex,
      use: getStyleLoaders({
        importLoaders: 1,
        modules: {
          localIdentName: '[name]__[local]___[hash:base64:5]'
        }
      }),
    




5.7
---

5.6. Using Radium for Media Queries
Person.js
App.js

5.5. Adding and Using Radium
App.js
Person.js

npm install --save radium
as we cant use sudo selectors in one line style and media queries. Radium helps us to solve this Problem
  sudo selectors :  selectors which depands on other selectors 
    eg: button:hover 

5.4. Setting Class Names Dynamically
App.js
App.css


5.3. Setting Styles Dynamically
App.js


5.2. Outlining the Problem Set
---


4.9
App.js

4.8 : adding key property
App.js

4.7 : deleting a list
App.js

4.6
Person.js
App.js

4.5 : converting 'person' to 'persons' in state. hence changing at respective places where this.state.person is used
App.js

4.4
intro

4.3
App.js

4.2
App.js

3.25
App.js

3.24 :creating and linking css file
Person.css
Person.js

3.23 : 
now we want to user to enter the name and that should be visible instead of 'Bob'
Person.js
App.js

3.22 : passing params
App.js
Person/Person.js

3.21
App.js


3.20
App.js


3.18
App.js

3.16
App.js  :button

3.14
App.js : state

3.13
App.js
Person/Person.js


3.12
App.js
Person/Person.js

3.11
Person/Person.js

3.10
App.js



3.8
Person/Person.js
App.js

it is convension that all the compenents name start with uppercase. as we are planning to create one component regarding person, hence created 'Person' compenent.


3.6
App.js

3.5
index.js
App.js

react is all about creating compenents. 
"App" compenent gets used in "index.js" file and from it is reendered to "root" compenent of index.html file


