7.8. Component Update Lifecycle (for props Changes)

the way we have life cycle for compenent creation, same way we have lifeycle for component updation.

so, when 'props' or 'state' change, react has to re-evalualte the compenent. at that time updation lifecycle is implemented.

1. getDerivedStateFromProps(props, state):
  1. not much used but will be used to inilize the state of the component that updates based on props
  eg: in a form control when u gets the values eneterd by the user and then updating dom based on the values
  2. used to sync the local state inside of the component to the props
  3. no side effects can be used ie no sending http req

2. shouldComponentUpdate(nextProp, nextSate):
  1. its quite interesting hook. why?
    because it can help us to cancel the updating process. thus, here we can decide id component should be updated and re-rendered.
    why we should check it? 
      for performance optimization. 
  2. it should be used carefully as it can break the component while blocking the updating process from happening correctly.
  3. its very powerful as it helps preventing unnessary updates cycles.
  4. no side effects can be used ie no sending http req

3. render():
  1. constructs the virtual DOM and gives out JSX

4. updates child compenents props
  1. if render is having sub components, then their respective lifecyle is will be completed first.
  2. once all the sub components of render is done. then render() method is marked as complete.

5. getSnapshotBeforeUpadte(preProps, prevState):
  1. takes the previous props and previous states as input and returns the snapshot object which can be freely configured
  2. this hook is not much used
  3. used for last minute dom oprertions, but that doesnt mean changes to DOM but like getting the current scrolling postion of the user.
  4. cant use any side effects like hhtp request.

6. componentDidUpdate() :
  1. it tells that updating is completed.
  2. can do side effects like making http request. 
    just keep in mind not to enter infinte loop, as respond will come which will update the component and this cycle starts again
  3. should not call setState syncronisly or outside of promise as that will simply lead to unnessary re-render cycle

converting function based component(Person and Persons)  to class based compenent so that we can we see the functionilty


Persons.js
App.js

as we can see, other commands didnt ran except the getDerivedStateFromProps because 'getDerivedStateFromProps' is part creational life cycle and other methods will run when there will some update.

to run update methods, we will type somthing in inputbox, which will cause updating in state.


7.7. Component Creation Lifecycle in Action
App.js
Persons.js
Person.js

7.6. Class Component Lifecycle Overview
---

7.5. Class-based vs Functional Components
index.js
App.js
Cockpit.js


7.4. Comparing Stateless and Stateful Components
---

7.3. Splitting an App Into Components
App.js
Persons.js
Cockpit.js
Cockpit.css


7.2. A Better Project Structure
ErrorBoundary : deleted
Components/Cockpit/Cockpit.js : new file
Components/Persons/Persons.js :new file
Components/Persons/Person/Person.js : deleted random error
Components/Persons/Person/Person.css : no changes
Containers/App.js : ErrorBoundary deleted, changing path
Containers/App.css : no change
Containers/App.test.js :  no change
index.js : changing path
assets : new folder, in case we nned to add any img




6.5. Using Error Boundaries (React 16+)
Person.js
ErrorBoundary/ErrorBoundary.js
App.js

5.11. Working with Media Queries
Person.js
Person.css


5.10. Adding Pseudo Selectors
App.js
App.css

5.9
---

5.8. Enabling & Using CSS Modules
webpack.config.js
App.js
Person.js

5.7
---

5.6. Using Radium for Media Queries
Person.js
App.js

5.5. Adding and Using Radium
App.js
Person.js

5.4. Setting Class Names Dynamically
App.js
App.css


5.3. Setting Styles Dynamically
App.js


5.2. Outlining the Problem Set
---


4.9
App.js

4.8 : adding key property
App.js

4.7 : deleting a list
App.js

4.6
Person.js
App.js

4.5 : converting 'person' to 'persons' in state. hence changing at respective places where this.state.person is used
App.js

4.4
intro

4.3
App.js

4.2
App.js

3.25
App.js

3.24 :creating and linking css file
Person.css
Person.js

3.23 : 
now we want to user to enter the name and that should be visible instead of 'Bob'
Person.js
App.js

3.22 : passing params
App.js
Person/Person.js

3.21
App.js


3.20
App.js


3.18
App.js

3.16
App.js  :button

3.14
App.js : state

3.13
App.js
Person/Person.js


3.12
App.js
Person/Person.js

3.11
Person/Person.js

3.10
App.js



3.8
Person/Person.js
App.js

it is convension that all the compenents name start with uppercase. as we are planning to create one component regarding person, hence created 'Person' compenent.


3.6
App.js

3.5
index.js
App.js

react is all about creating compenents. 
"App" compenent gets used in "index.js" file and from it is reendered to "root" compenent of index.html file


