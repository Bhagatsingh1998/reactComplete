8.32. Reusing the Backdrop

adding the backdrop behiend the SideDrawer and SideDrawer can be opened dynamically. 

SideDrawer
Layout : changing whole layout from function to class. 

8.31. More about Responsive Adjustments

NavigationItem.css : making mobile friendly
NavigationItems.css : changing flex settings
SideDrawer.css  : adding margin-bottom to logo
Toolbar.css
Toolbar


8.30. Working on Responsive Adjustments
rn, in our SideDrawer logo is way to big and thats is because it is inherting the style from Logo.css where height is 100% thust it is taking whole height of SideDrawer and leaving space of other things.
and thus, we are not able to see NavigationItems.

thus, we can add media query in Logo.css but its better to control the style where we embed that componenet.

// 1.way: passing the styling property as props and then using inline style at that componenet.

// 2. wrapping the componenet in the element and giving the css class name and editing css file.

Toolbar : 1st method
Logo : 1st method
SideDrawer: 1st method
Toolbar : 2nd methods
Toolbar.css : 2nd methods
SideDrawer: 2nd method
SideDrawer.css: 2nd method



8.29. Creating a Responsive SideDrawer

creating separate componenet
components/Navigation/SideDrawer/SideDrawer.js : new
components/Navigation/SideDrawer/SideDrawer.css : new

SideDrawer.css
SideDrawer
Layout


8.28. Adding Reusable Navigation Items

creating seprate navigation items in seprate componenet as latter we will use it in sidedraw.

creating separate componenet
compenents/NavigationItems/NavigationItems.js : new
compenents/NavigationItems/NavigationItems.css : new
compenents/NavigationItems/NavigationItem/NavigationItems.js : new
compenents/NavigationItems/NavigationItem/NavigationItems.css : new


compenents/NavigationItems/NavigationItems.js 
compenents/NavigationItems/NavigationItems.css 
compenents/NavigationItems/NavigationItem/NavigationItems.js 
compenents/NavigationItems/NavigationItem/NavigationItem
Toolbar

8.27. Using a Logo in our Application

creating separate componenet
components/Logo/Logo.js : new
components/Logo/Logo.css : new

Logo.js
Logo.css
Toolbar

8.26. Adding a Toolbar

creating separate componenet
compenents/Navigation/Toolbar/Toolbar.js : new
compenents/Navigation/Toolbar/Toolbar.css : new

Toolbar.js
Toolbar.css
Layout.js
Layout.css : changing 16px to 12px


8.25. Adding the Price to the Order Summary

OrderSummary
BurgerBuilder


8.24. Implementing the Button Component

OrderSummary
BurgerBuilder


8.23. Adding a Custom Button Component

creating separate componenet
UI/Button/Button.js : new
UI/Button/Button.css : new (material)

OrderSummary
UI/Button/Button.js
UI/Button/Button.css


8.22. Implementing the Backdrop Component

Backdrop.js
Backdrop/Backdrop.css : new
Modal
BurgerBuilder


8.21. Showing & Hiding the Modal (with Animation!)

BurgerBuilder
BuildControls : onclick
Modal

8.20. Creating the Order Summary Modal

once the order now button is clicked, we want to show summary of the order in a model
model : to have a wrapping element which provide teh styling which then simply warps itself about any content we want to show in tat model

creating new files:
Burger/OrderSummary/OrderSummary.js : new
Burger/UI/Backdrop/Backdrop.js : new
Burger/UI/Modal/Modal.js : new
Burger/UI/Modal/Modal.css : new


filling out files:
Burger/UI/Modal/Modal.js 
Burger/UI/Modal/Modal.css
Burger/OrderSummary/OrderSummary.js 
BurgerBuilder



8.19. Adding the Order Button
add the 'order now' button
check if burger is purchaseable or not.
make 'order now' button disabled or enabled

BuildControls
BurgerBuilder


8.18. Displaying and Updating the Burger Price

BurgerBuilder
BuildControls


8.17. Removing Ingredients Safely
first making 'Less' working, then giving the functionailty of disabled
BurgerBuilder
BuildControls
BuildControl
playgound.js

8.16. Connecting State to Build Controls

BurgerBuilder
BuildControls
BuildControl


8.15. Outputting Multiple Build Controls

BuildControls/BuildControls.js
BurgerBuilder
BuildControls/BuildControl/BuildControl.js :  correction button inplace of div

8.14. Adding the Build Control Component

BuildControls/BuildControls.js :new
BuildControls/BuildControls.css :new
BuildControls/BuildControl/BuildControl.js :new
BuildControls/BuildControl/BuildControl.css :new


8.13. Calculating the Ingredient Sum Dynamically
making userfreindly ui. if no ingrediants are there, displaying message

BurgerBuilder
Burger


8.12. Outputting Burger Ingredients Dynamically
Our burger is getting displayed but the way we are displaying is hard coded. we need to display the ingrediants of the burger dynmically and for that we need a state.

BurgerBuilder
Burger



8.11. Starting the Burger Component
Burger/Burger.css : new file
Burger
BurgerIngrediant : correction 'bread-bottom'
BurgerBuilder

8.10. Adding Prop Type Validation
BurgerIngrediant
npm install --save prop-types


8.9. Adding a Dynamic Ingredient Component
Burger/Burger.js
Burger/BurgerIngrediant/BurgerIngrediant.js
Burger/BurgerIngrediant/BurgerIngrediant.css


8.8. Starting Implementation of The Burger Builder Container
containers/BurgerBuilder/BurgerBuilder : new file
App
containers/Layout/Layout.css : new file
Layout


8.7. Creating a Layout Component
starting to build the app, we can divide it into 2 parts ie
  1. layout (containing everything navbar + burgerBuilder)
  2. burgerBuilder - main part of app
components :  not managing state
containers : managing state
Components/Layout/Layout : new file


8.6. Setting up the Project
implemeneting css class modules with npm run eject

config/webpack.config.js : modify
App.css : delete
logo.svg : delete
App.js : modify
public/index.html : title change
index.css : font add
favicon.ico : delete
burger.ico : new icon


8.5. Planning the State
---

8.4. Planning our App - Layout and Component Tree
---

8.3. Planning an App in React - Core Steps
---

8.2. Module Introduction
---

8.1. About React Hooks
---

7.32. Wrap Up
---

7.31. contextType & useContext()
Person
Cockpit

7.30. Using the Context API
context/auth-context.js : new file
App
Person
Cockpit
Persons

7.29. Understanding Prop Chain Problems
Cockpit
App.js
Persons.js
Person

7.28. Refs with React Hooks
Cockpit.js


7.27. Using Refs
Person.js

7.26. Using PropTypes
npm install --save prop-types
Person.js

7.25. Setting State Correctly
App.js


7.24. Passing Unknown Props
Person.js
withClass

7.23. Another Form of HOCs
hoc/withClass : rename
App.js
Cockpit.js : comment timeout.

7.22. Higher Order Components (HOC) - Introduction
hoc/WithClass : new file
App.js

7.21. Using React.Fragment
Person.js

7.20 Windows user
nil

7.19. Rendering Adjacent JSX Elements
Person.js
hoc/Auxilliary.js 


7.18. How React Updates the DOM
nil

7.17. PureComponents instead of shouldComponentUpdate
Persons.js

7.16. When should you optimize
nil


7.15. Optimizing Functional Components with React.memo()
Cockpit.js
App.js


7.14. Using shouldComponentUpdate for Optimization
Persons.js


7.13. Cleanup Work with useEffect() - Ex
Cockpit.js

7.12. Cleaning up with Lifecycle Hooks & useEffect()
Persons.js
Cockpit.js
App.js

7.11. Controlling the useEffect() Behavior
Cockpit.js


7.10. Using useEffect() in Functional Components
Cockpit.js


7.9. Component Update Lifecycle (for state Changes)
App.js


7.8. Component Update Lifecycle (for props Changes)
Persons.js
App.js

7.7. Component Creation Lifecycle in Action
App.js
Persons.js
Person.js

7.6. Class Component Lifecycle Overview
---

7.5. Class-based vs Functional Components
index.js
App.js
Cockpit.js


7.4. Comparing Stateless and Stateful Components
---

7.3. Splitting an App Into Components
App.js
Persons.js
Cockpit.js
Cockpit.css


7.2. A Better Project Structure
ErrorBoundary : deleted
Components/Cockpit/Cockpit.js : new file
Components/Persons/Persons.js :new file
Components/Persons/Person/Person.js : deleted random error
Components/Persons/Person/Person.css : no changes
Containers/App.js : ErrorBoundary deleted, changing path
Containers/App.css : no change
Containers/App.test.js :  no change
index.js : changing path
assets : new folder, in case we nned to add any img




6.5. Using Error Boundaries (React 16+)
Person.js
ErrorBoundary/ErrorBoundary.js
App.js

5.11. Working with Media Queries
Person.js
Person.css


5.10. Adding Pseudo Selectors
App.js
App.css

5.9
---

5.8. Enabling & Using CSS Modules
webpack.config.js
App.js
Person.js

5.7
---

5.6. Using Radium for Media Queries
Person.js
App.js

5.5. Adding and Using Radium
App.js
Person.js

5.4. Setting Class Names Dynamically
App.js
App.css


5.3. Setting Styles Dynamically
App.js


5.2. Outlining the Problem Set
---


4.9
App.js

4.8 : adding key property
App.js

4.7 : deleting a list
App.js

4.6
Person.js
App.js

4.5 : converting 'person' to 'persons' in state. hence changing at respective places where this.state.person is used
App.js

4.4
intro

4.3
App.js

4.2
App.js

3.25
App.js

3.24 :creating and linking css file
Person.css
Person.js

3.23 : 
now we want to user to enter the name and that should be visible instead of 'Bob'
Person.js
App.js

3.22 : passing params
App.js
Person/Person.js

3.21
App.js


3.20
App.js


3.18
App.js

3.16
App.js  :button

3.14
App.js : state

3.13
App.js
Person/Person.js


3.12
App.js
Person/Person.js

3.11
Person/Person.js

3.10
App.js



3.8
Person/Person.js
App.js

it is convension that all the compenents name start with uppercase. as we are planning to create one component regarding person, hence created 'Person' compenent.


3.6
App.js

3.5
index.js
App.js

react is all about creating compenents. 
"App" compenent gets used in "index.js" file and from it is reendered to "root" compenent of index.html file


